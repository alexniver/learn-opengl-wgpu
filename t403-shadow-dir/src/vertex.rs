#[repr(C)]
#[derive(Debug, Clone, Copy, bytemuck::Pod, bytemuck::Zeroable)]
pub struct Vertex {
    pub pos: [f32; 3],
    pub normal: [f32; 3],
    pub tex_coord: [f32; 2],
}

impl Vertex {
    pub fn new(pos: [f32; 3], normal: [f32; 3], tex_coord: [f32; 2]) -> Self {
        Self {
            pos,
            normal,
            tex_coord,
        }
    }

    const ATTRS: [wgpu::VertexAttribute; 3] =
        wgpu::vertex_attr_array![0 => Float32x3, 1 => Float32x3, 2 => Float32x2];
    pub fn vertex_buffer_layout<'a>() -> wgpu::VertexBufferLayout<'a> {
        wgpu::VertexBufferLayout {
            array_stride: std::mem::size_of::<Self>() as u64,
            step_mode: wgpu::VertexStepMode::Vertex,
            attributes: &Self::ATTRS,
        }
    }

    pub fn triangle() -> [Self; 3] {
        [
            Self::new([-0.5, -0.5, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0]),
            Self::new([0.5, -0.5, 0.0], [0.0, 0.0, 1.0], [1.0, 1.0]),
            Self::new([0.0, 0.5, 0.0], [0.0, 0.0, 1.0], [0.5, 0.0]),
        ]
    }

    pub fn plane() -> ([Self; 4], [u32; 6]) {
        let size = 10.0;
        let min = -size;
        let max = size;
        let size_2 = size * 2.0;
        (
            [
                Self::new([min, 0.0, max], [0.0, 1.0, 0.0], [0.0, size_2]),
                Self::new([max, 0.0, max], [0.0, 1.0, 0.0], [size_2, size_2]),
                Self::new([max, 0.0, min], [0.0, 1.0, 0.0], [size_2, 0.0]),
                Self::new([min, 0.0, min], [0.0, 1.0, 0.0], [0.0, 0.0]),
            ],
            [0, 1, 3, 1, 2, 3],
        )
    }

    pub fn rect() -> ([Self; 4], [u32; 6]) {
        (
            [
                Self::new([-0.5, -0.5, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0]),
                Self::new([0.5, -0.5, 0.0], [0.0, 0.0, 1.0], [1.0, 1.0]),
                Self::new([0.5, 0.5, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0]),
                Self::new([-0.5, 0.5, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0]),
            ],
            [0, 1, 3, 1, 2, 3],
        )
    }

    pub fn rect_right_up() -> ([Self; 4], [u32; 6]) {
        let min = 0.0;
        let max = 1.0;
        (
            [
                Self::new([min, min, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0]),
                Self::new([max, min, 0.0], [0.0, 0.0, 1.0], [1.0, 1.0]),
                Self::new([max, max, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0]),
                Self::new([min, max, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0]),
            ],
            [0, 1, 3, 1, 2, 3],
        )
    }

    pub fn rect_full_screen() -> ([Self; 4], [u32; 6]) {
        let min = -1.0;
        let max = 1.0;
        (
            [
                Self::new([min, min, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0]),
                Self::new([max, min, 0.0], [0.0, 0.0, 1.0], [1.0, 1.0]),
                Self::new([max, max, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0]),
                Self::new([min, max, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0]),
            ],
            [0, 1, 3, 1, 2, 3],
        )
    }

    pub fn cube() -> [Self; 36] {
        [
            // front
            Self::new([-0.5, -0.5, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0]),
            Self::new([0.5, -0.5, 0.0], [0.0, 0.0, 1.0], [1.0, 1.0]),
            Self::new([-0.5, 0.5, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0]),
            Self::new([0.5, -0.5, 0.0], [0.0, 0.0, 1.0], [1.0, 1.0]),
            Self::new([0.5, 0.5, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0]),
            Self::new([-0.5, 0.5, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0]),
            // right
            Self::new([0.5, -0.5, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0]),
            Self::new([0.5, -0.5, -1.0], [1.0, 0.0, 0.0], [1.0, 1.0]),
            Self::new([0.5, 0.5, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0]),
            Self::new([0.5, -0.5, -1.0], [1.0, 0.0, 0.0], [1.0, 1.0]),
            Self::new([0.5, 0.5, -1.0], [1.0, 0.0, 0.0], [1.0, 0.0]),
            Self::new([0.5, 0.5, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0]),
            // back
            Self::new([0.5, -0.5, -1.0], [0.0, 0.0, -1.0], [0.0, 1.0]),
            Self::new([-0.5, -0.5, -1.0], [0.0, 0.0, -1.0], [1.0, 1.0]),
            Self::new([0.5, 0.5, -1.0], [0.0, 0.0, -1.0], [0.0, 0.0]),
            Self::new([-0.5, -0.5, -1.0], [0.0, 0.0, -1.0], [1.0, 1.0]),
            Self::new([-0.5, 0.5, -1.0], [0.0, 0.0, -1.0], [1.0, 0.0]),
            Self::new([0.5, 0.5, -1.0], [0.0, 0.0, -1.0], [0.0, 0.0]),
            // left
            Self::new([-0.5, -0.5, -1.0], [-1.0, 0.0, 0.0], [0.0, 1.0]),
            Self::new([-0.5, -0.5, 0.0], [-1.0, 0.0, 0.0], [1.0, 1.0]),
            Self::new([-0.5, 0.5, -1.0], [-1.0, 0.0, 0.0], [0.0, 0.0]),
            Self::new([-0.5, -0.5, 0.0], [-1.0, 0.0, 0.0], [1.0, 1.0]),
            Self::new([-0.5, 0.5, 0.0], [-1.0, 0.0, 0.0], [1.0, 0.0]),
            Self::new([-0.5, 0.5, -1.0], [-1.0, 0.0, 0.0], [0.0, 0.0]),
            // bottom
            Self::new([-0.5, -0.5, -1.0], [0.0, -1.0, 0.0], [0.0, 1.0]),
            Self::new([0.5, -0.5, -1.0], [0.0, -1.0, 0.0], [1.0, 1.0]),
            Self::new([-0.5, -0.5, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0]),
            Self::new([0.5, -0.5, -1.0], [0.0, -1.0, 0.0], [1.0, 1.0]),
            Self::new([0.5, -0.5, 0.0], [0.0, -1.0, 0.0], [1.0, 0.0]),
            Self::new([-0.5, -0.5, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0]),
            // top
            Self::new([-0.5, 0.5, 0.0], [0.0, 1.0, 0.0], [0.0, 1.0]),
            Self::new([0.5, 0.5, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0]),
            Self::new([-0.5, 0.5, -1.0], [0.0, 1.0, 0.0], [0.0, 0.0]),
            Self::new([0.5, 0.5, 0.0], [0.0, 1.0, 0.0], [1.0, 1.0]),
            Self::new([0.5, 0.5, -1.0], [0.0, 1.0, 0.0], [1.0, 0.0]),
            Self::new([-0.5, 0.5, -1.0], [0.0, 1.0, 0.0], [0.0, 0.0]),
        ]
    }
}
